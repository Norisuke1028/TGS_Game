#include "InGameScene.h"
#include "InputControl.h"
#include "ResourceManager.h"
#include "DxLib.h"

InGameScene::InGameScene() :
	guzai_image()
	,select_image()
	,next()
	,correct()
	,sales()
	,check_count()
	,r_burger()
	,random()
	,buns_image()
	,select_burger_image()
	,sozai_count()
{
	ingame_cursol = 0;
	counter_time = 0;
	check_count = 0;
	next_scene = eSceneType::eInGame;
	next = 0;
	correct = 0;
	sales = 0;
}

InGameScene::~InGameScene()
{

}

void InGameScene::Initialize()
{
	ResourceManager* rm = ResourceManager::GetInstance();

	guzai_image = LoadGraph("Resource/image/guzai.png");  //具材の画像
	select_image = LoadGraph("Resource/image/kettei.png");  //決定ボタンの画像
	buns_image = LoadGraph("Resource/image/buns02.png");  //バンズの画像
	LoadDivGraph("Resource/image/guzai04.png", 4, 4, 1, 200, 170, select_burger_image);
}

eSceneType InGameScene::Update()
{
	//制限時間処理
	if (counter_time <= 6000)
	{
		counter_time++;
		if (counter_time >= 6000)
		{
			//30秒経つとリザルト画面へ遷移する
			return eSceneType::eEnd;
		}

	}

		// パッド入力制御のインスタンスを取得
		InputControl* pad_input = InputControl::GetInstance();

			if (pad_input->GetButtonInputState(XINPUT_BUTTON_DPAD_LEFT) == ePadInputState::ePress)
			{
				ingame_cursol--;
				if (ingame_cursol < 0)
				{
					ingame_cursol = 4;
				}
			}
			if (pad_input->GetButtonInputState(XINPUT_BUTTON_DPAD_RIGHT) == ePadInputState::ePress)
			{
				ingame_cursol++;
				if (ingame_cursol > 4)
				{
					ingame_cursol = 0;
				}
			}
		select_guzai();

	// 親クラスの更新処理を呼び出す
	return GetNowSceneType();

}

//描画処理
void InGameScene::Draw() const
{
	//インゲームテキスト
	//DrawString(50,50,"InGameSceneです",GetColor(255,255,255));
	//背景（適当）
	DrawBox(0, 0, 1280, 720, 0xffff00, true);
	//時間制限
	DrawFormatString(1200, 20, 0x000000, "%d", counter_time / 100);
	
	//選択した具材(画像表示)
	DrawRotaGraph(200,275,1.3,0, select_burger_image[guzai_select[0]],true);
	DrawRotaGraph(200, 235, 1.3, 0, select_burger_image[guzai_select[1]], true);
	DrawRotaGraph(200, 195, 1.3, 0, select_burger_image[guzai_select[2]], true);
	DrawRotaGraph(200, 155, 1.3, 0, select_burger_image[guzai_select[3]], true);

	//指定されるハンバーガー
	DrawFormatString(300, 40, 0x000000, "%d", r_burger[0]);
	DrawFormatString(300, 60, 0x000000, "%d", r_burger[1]);
	DrawFormatString(300, 80, 0x000000, "%d", r_burger[2]);
	DrawFormatString(300, 100, 0x000000, "%d", r_burger[3]);

	DrawFormatString(600, 160, 0x000000, "%d", check_count);  //ジャッジ
	//DrawFormatString(600, 140, 0x000000, "%d", correct);  //正解数
	DrawFormatString(600, 180, 0x000000, "%d", sales);

	//具材選択カーソル描画
	DrawBox(19 + (ingame_cursol * 249.9), 519, 249 + (ingame_cursol * 249.9), 669, 0xffffff, false);
	DrawBox(20 + (ingame_cursol * 250), 520, 250 + (ingame_cursol * 250), 670, 0xffffff, false);
	DrawBox(21 + (ingame_cursol * 250.1), 521, 251 + (ingame_cursol * 250.1), 671, 0xffffff, false);

	//具材選択描画
	DrawBox(110, 150, 290, 180, 0xffffff, false);
	DrawBox(110, 190, 290, 220, 0xffffff, false);
	DrawBox(110, 230, 290, 260, 0xffffff, false);
	DrawBox(110, 270, 290, 300, 0xffffff, false);

	//具材画像の描画
	DrawRotaGraph(510, 600,1.0,0,guzai_image, true);
	DrawRotaGraph(1135, 590, 0.8, 0, select_image, false);
	DrawRotaGraph(180, 220, 1.0, 0, buns_image, true);
}

void InGameScene::Finalize()
{
	DeleteGraph(background_image);
	DeleteGraph(guzai_image);
	DeleteGraph(select_image);
}

//具材選択処理
int InGameScene::select_guzai()
{
	// パッド入力制御のインスタンスを取得
	InputControl* pad_input = InputControl::GetInstance();
	//具材を4回選ぶ
	switch (next)
	{
		case(0):
			//選んだ具材の初期化処理
			for (int i = 0; i < 4; ++i) {
				guzai_select[i] = -1;
			}
			rand_burger();
			next += 1;
		case(1):
			if (pad_input->GetButtonInputState(XINPUT_BUTTON_B) == ePadInputState::ePress)
			{
				if (ingame_cursol == 4)
				{
					next = 5;
				}
				else
				{
					guzai_select[0] = ingame_cursol;
					next += 1;
				}
			}
		break;
		case(2):
			if (pad_input->GetButtonInputState(XINPUT_BUTTON_B) == ePadInputState::ePress)
			{
				if (ingame_cursol == 4)
				{
					next = 5;
				}
				else
				{
					guzai_select[1] = ingame_cursol;
					next += 1;
				}
			}
		break;
		case(3):
			if (pad_input->GetButtonInputState(XINPUT_BUTTON_B) == ePadInputState::ePress)
			{
				if (ingame_cursol == 4)
				{
					next = 5;
				}
				else
				{
					guzai_select[2] = ingame_cursol;
					next += 1;
				}
			}
		break;
		case(4):
			if (pad_input->GetButtonInputState(XINPUT_BUTTON_B) == ePadInputState::ePress)
			{
				// 決定ボタンが押されていてカーソルが素材選択位置なら素材を選択
				if (ingame_cursol < 4)
				{
					guzai_select[3] = ingame_cursol;
				}
				// 決定ボタンが押されていてカーソルが決定位置ならジャッジへ
				else if (ingame_cursol == 4)
				{
					next += 1;
				}
			}
			break;
		case(5):
			//決定ボタンを押すと具材チェック
			check_guzai();
			if (check_count == sozai_count)
			{
				//ハンバーガーによって売上額を変更する
				sales += 200 + (random * 50);
				//スコアを1加算する
				correct++;

				next += 1;
			}
			else {
				check_count = 0;
				next = 0;
			}
		break;
		case(6):
			check_count = 0;
			next += 1;
			break;
		case(7):
				next = 0;
			break;
	}

	return 0;
}


//指定されるハンバーガーをランダムに出力
int InGameScene::rand_burger()
{
	//ハンバーガーのパターン
	const int p_burger[6][4] = {
		{3,-1,-1,-1},  //パティ、空、空、空
		{3,1,-1,-1},   //パティ、チーズ、空、空
		{3,1,2,-1},    //パティ、チーズ、レタス、空
		{1,0,3,-1},    //チーズ、トマト、パティ、空
		{2,3,0,1},     //レタス、パティ、トマト、チーズ
		{3,0,2,1}      //パティ、トマト、レタス、チーズ
	};
	//ランダムに数字を出力
	random = 0 + rand() % 6;

	sozai_count = 0;
	//出力された数字によってハンバーガーを出力する
	for (int j = 0; j < 4; ++j)
	{
		r_burger[j] = p_burger[random][j];
		if (r_burger[j] != -1)
		{
			sozai_count++;
		}
	}

	return 0;
}

//具材チェック処理
int InGameScene::check_guzai()
{
	check_count = 0;

	for (int i = 0; i < sozai_count; i++)
	{
		if (guzai_select[i] != -1 && r_burger[i] == guzai_select[i])
		{
			check_count++;
		}
	}

	//空の部分になにか具材が選択されていたら不正解にする
	for (int i = sozai_count; i < 4; i++)
	{
		if (guzai_select[i] != -1) //空確認
		{
			check_count = -1; // 強制不正解
			break;
		}
	}

	return check_count;
}

eSceneType InGameScene::GetNowSceneType() const
{
	return eSceneType::eInGame;
}